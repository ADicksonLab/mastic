* Scripts

** making a SystemType pickle for seh tppu

#+BEGIN_SRC python :tangle make_seh_tppu_SystemType_pkl.py
  import os.path as osp
  import pickle

  from rdkit import Chem
  from mast.interfaces.rdkit import AssignBondOrdersFromTemplate
  from mast.interfaces.rdkit import RDKitMoleculeWrapper

  import mast.tests.data as mastdata
  import mast.system as mastsys


  TPPU_MOL_path = osp.join(".", "TPPU.mol")
  TPPU_MOL_rdkit = Chem.MolFromMolFile(TPPU_MOL_path, sanitize=True)
  TPPU_PDB_path = osp.join(".", "TPPU.pdb")
  TPPU_PDB_rdkit = Chem.MolFromPDBFile(TPPU_PDB_path, removeHs=False, sanitize=False)
  seh_PDB_path = osp.join(".", "sEH.pdb")
  seh_rdkit = Chem.MolFromPDBFile(seh_PDB_path, removeHs=False, sanitize=False)

  TPPU_rdkit = AssignBondOrdersFromTemplate(TPPU_MOL_rdkit, TPPU_PDB_rdkit)

  TPPU_rdkit_wrapper = RDKitMoleculeWrapper(TPPU_rdkit, mol_name="TPPU")
  seh_rdkit_wrapper = RDKitMoleculeWrapper(seh_rdkit, mol_name="sEH")

  TPPU_coords = TPPU_rdkit_wrapper.get_conformer_coords(0)
  seh_coords = seh_rdkit_wrapper.get_conformer_coords(0)

  TPPU_Molecule = TPPU_rdkit_wrapper.make_molecule_type(find_features=True)

  seh_Molecule = seh_rdkit_wrapper.make_molecule_type(find_features=True)

  seh_pkl_path = osp.join(".", "sEHMoleculeType.pkl")
  with open(seh_pkl_path, 'wb') as wf:
      pickle.dump(seh_Molecule, wf)

  member_types = [TPPU_Molecule, seh_Molecule]
  system_attrs = {'molecule_source' : 'rdkit'}
  sEH_TPPU_SystemType = mastsys.SystemType("sEH_TPPU_System",
                                           member_types=member_types,
                                           ,**system_attrs)

  system_pkl_path = osp.join(".", "sEH_TPPU_SystemType.pkl")
  with open(system_pkl_path, 'wb') as wf:
      pickle.dump(sEH_TPPU_SystemType, wf)

#+END_SRC

** get the coordinates for the crystal structure members
I messed this up for other stuff this could be easily rearranged and fixed though.
#+BEGIN_SRC python :tangle seh_tppu_crystal_coords.py
  import os.path as osp
  import numpy as np

  from rdkit import Chem
  import mast.tests.data as mastdata
  from mast.interfaces.rdkit import AssignBondOrdersFromTemplate
  from mast.interfaces.rdkit import RDKitMoleculeWrapper

  TPPU_MOL_path = osp.join(".", "TPPU.mol")
  TPPU_MOL_rdkit = Chem.MolFromMolFile(TPPU_MOL_path, sanitize=True)
  TPPU_PDB_path = osp.join(".", "TPPU.pdb")
  TPPU_PDB_rdkit = Chem.MolFromPDBFile(TPPU_PDB_path, removeHs=False, sanitize=False)
  seh_PDB_path = osp.join(".", "sEH.pdb")
  seh_rdkit = Chem.MolFromPDBFile(seh_PDB_path, removeHs=False, sanitize=False)

  TPPU_rdkit = AssignBondOrdersFromTemplate(TPPU_MOL_rdkit, TPPU_PDB_rdkit)

  TPPU_rdkit_wrapper = RDKitMoleculeWrapper(TPPU_rdkit, mol_name="TPPU")
  seh_rdkit_wrapper = RDKitMoleculeWrapper(seh_rdkit, mol_name="sEH")

  TPPU_coords = TPPU_rdkit_wrapper.get_conformer_coords(0)
  seh_coords = seh_rdkit_wrapper.get_conformer_coords(0)

  # write the coordinates out to a binary file
  np.save("TPPU_coords.npy", TPPU_coords)
  np.save("sEH_coords.npy", seh_coords)
#+END_SRC

** binding site association
#+BEGIN_SRC python
  import os.path as osp
  import pickle
  import sys

  import mast.system as mastsys

  # must set this to pickle substantiated systems sometimes
  sys.setrecursionlimit(100000)

  # load the system type pickle in
  system_pkl_path = osp.join(".", "sEH_TPPU_SystemType.pkl")
  with open(system_pkl_path, 'rb') as rf:
      sEH_TPPU_SystemType = pickle.load(rf)

  # put them together in the order they are as system members
  member_coords = [TPPU_coords, seh_coords]

  # substantiate the system
  system = sEH_TPPU_SystemType.to_system(member_coords)

  binding_site_cutoff_dist = 4 #in Angstroms \AA

  # find the atoms within this distance
  binding_site_atoms = system.molecules[0].atoms_within_distance(
      binding_site_cutoff_dist)

  # get the indices of these atoms to define the AssociationType
  binding_site_atom_idxs = [system.molecules[1].atoms.index(atom) for
                            atom in binding_site_atoms]

  # you might also want to get the pdb serial numbers so you can
  # visually check to see where these atoms are
  binding_site_atom_serials = [atom.atom_type.pdb_serial_number for atom

                               in binding_site_atoms]

  import mast.molecule as mastmol

  # the selection map tells the association the index of the member and
  # the indices of the atoms to include as one component of the
  # association. By selection None as the indices no selection will be
  # made and the whole molecule will be a component
  selection_map = [(1, binding_site_atom_idxs), (0, None)]

  # The selection types correspond to the elements in the selection map
  # and tell the AssociationType what kind of selection to make on the
  # molecule. Setting one of them to None should mean the selection map
  # also had no indices selected and it should use the whole system
  # member. The MoleculeAtomSelection allows for selection of atoms in a
  # Molecule or MoelculeType.
  selection_types = [mastmol.MoleculeAtomSelection, None]

  # instantiate the association
  sehBS_tppu_assoc = mastsys.AssociationType("sEHBS-TPPU",
                                           system_type=sEH_TPPU_SystemType,
                                           selection_map=selection_map,
                                           selection_types=selection_types)

  # add it to the system
  sEH_TPPU_SystemType.add_association_type(sehBS_tppu_assoc)

#+END_SRC

** profiling interactions without interaction space of the crystal structure

#+BEGIN_SRC python :tangle profile_simple_seh_tppu_cryst.py
  import os.path as osp
  import pickle

  from mast.interactions.hydrogen_bond import HydrogenBondType

  system_cryst_pkl_path = osp.join(".", "sEH_TPPU_System_cryst.pkl")
  with open(system_cryst_pkl_path, 'rb') as pkl_rf:
      seh_tppu_System_cryst = pickle.load(pkl_rf)

  tryp_tppu_prof_results_0 = seh_tppu_System_cryst.associations[0].test_profile_interactions([HydrogenBondType])
  tryp_tppu_prof_results_1 = seh_tppu_System_cryst.associations[1].test_profile_interactions([HydrogenBondType])
#+END_SRC

** profiling interactions with interaction space of the crystal structure

#+BEGIN_SRC python :tangle profile_inx_space_seh_tppu_cryst.py
  import os.path as osp
  import pickle
  import numpy as np

  from mast.interactions.hydrogen_bond import HydrogenBondType
  import mast.profile as mastprof
  from mast.interaction_space import InteractionSpace

  # load the system type pickle in
  system_pkl_path = osp.join(".", "sEH_TPPU_SystemType.pkl")
  with open(system_pkl_path, 'rb') as rf:
      sEH_TPPU_SystemType = pickle.load(rf)

  # generate the interaction space we will be profiling
  inx_space = InteractionSpace(sEH_TPPU_SystemType)

  # we want associations for all combinations of members for a degree 2
  # interaction (e.g. hydrogen bonds)
  assoc_terms = sEH_TPPU_SystemType.association_polynomial(
      degree=2,
      permute=True,
      replace=True,
      return_idxs=True)

  # make the unit associations, interaction classes, and add to interaction space
  for assoc_term in assoc_terms:
      # make the unit AssociationTypes
      assoc_idx = sEH_TPPU_SystemType.make_unit_association_type(assoc_term)
      association_type = sEH_TPPU_SystemType.association_types[assoc_idx]

      # make HydrogenBondType interaction classes for this association
      # in the inx_space
      inx_space.add_association_subspace(association_type, HydrogenBondType)

  # make a Profiler for the inx space
  profiler = mastprof.InxSpaceProfiler(inx_space)


  # load the coordinates for the members
  member_coords = [np.load('TPPU_coords.npy'), np.load("sEH_coords.npy")]
  # substantiate the system
  system = sEH_TPPU_SystemType.to_system(member_coords)

  # profile the interaction space over the system
  system_profile = profiler.profile(system)
#+END_SRC


*** COMMENT OLD
#+BEGIN_SRC python :tangle profile_inx_space_seh_tppu_cryst.py
  import os.path as osp
  import pickle
  import numpy as np

  from mast.interactions.hydrogen_bond import HydrogenBondType
  import mast.profile as mastprof

  # load the system type pickle in
  system_pkl_path = osp.join(".", "sEH_TPPU_SystemType.pkl")
  with open(system_pkl_path, 'rb') as rf:
      sEH_TPPU_SystemType = pickle.load(rf)

  # we generate interaction space for the system for all combinations of
  # members for a degree 2 interaction (e.g. hydrogen bonds)
  assoc_terms = sEH_TPPU_SystemType.association_polynomial(
      degree=2,
      permute=True,
      replace=True,
      return_idxs=True)

  # this gives them to you organized by which association they fall under
  hbond_inx_class_idxs = sEH_TPPU_SystemType.generate_unit_interaction_space(
      assoc_terms, HydrogenBondType)

  # load the coordinates for the members
  member_coords = [np.load('TPPU_coords.npy'), np.load("sEH_coords.npy")]

  # substantiate the system
  system = sEH_TPPU_SystemType.to_system(member_coords)

  system_profile = mastprof.SystemProfile(system)

  # just profile the inter-member interactions
  system_profile.profile_association((0, 1))
  system_profile.profile_association((1, 0))
#+END_SRC


** get pdb serial numbers so we can verify these hits

#+BEGIN_SRC python :tangle print_hits_pdb_serials.py
  for assoc_term, assoc_profile in system_profile.association_profiles.items():
      for hit_idx in assoc_profile.hits:
          assoc_idx = sEH_TPPU_SystemType.assoc_member_idxs.index(assoc_term)
          inx_class = sEH_TPPU_SystemType.association_types[assoc_idx].interaction_subspace[hit_idx]
          print("interaction class index {0}".format(hit_idx))
          for feature_type in inx_class.feature_types:
              pdb_serials = [atom_type.pdb_serial_number for atom_type in
                             feature_type.atom_types]
              print("    Feature {0}, {1}: {2}".format(feature_type.name,
                                                   feature_type.rdkit_family,
                                                   " ".join([str(i) for i in pdb_serials])))
#+END_SRC
