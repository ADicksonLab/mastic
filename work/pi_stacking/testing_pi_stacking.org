* Make test structures

Make a reference structure including hydrogens
#+BEGIN_SRC python :tangle make_benzene_pdb.py
  import os.path as osp

  from mastic.tests.hexagons import hexagon3d, write_hexagon_pdb, \
      pdb_row, end_row, benzene_bond_length, benzene_H_bond_length, \
      benzene3d, write_benzene_pdb

  work_dir = "/home/salotz/Dropbox/devel/mastic/work/pi_stacking"
  write_benzene_pdb(benzene3d(), osp.join(work_dir, "ref_benzene.pdb"))

#+END_SRC


** COMMENT make pdbs of hexagons for visualization

#+BEGIN_SRC python :tangle pi_stacking_hexagons.py
  import os.path as osp

  import numpy as np
  import math

  from mastic.tests.hexagons import hexagon3d, write_hexagon_pdb, \
      pdb_row, end_row, benzene_bond_length
  import mastic.config.interactions as masticinxconfig

  work_dir = "/home/salotz/Dropbox/devel/mastic/work/pi_stacking"

  # unit stuff
  with open(osp.join(work_dir, "origin.pdb"), 'w') as wf:
      wf.write(pdb_row(0, 0.0, 0.0, 0.0, el='S'))
      wf.write(end_row)

  write_hexagon_pdb(hexagon3d(), osp.join(work_dir, "ref_hex.pdb"))
  stacked_centroid = [0,0,1]
  write_hexagon_pdb(hexagon3d(centroid=stacked_centroid),
                    osp.join(work_dir, "stacked_hex.pdb"),
                    centroid=stacked_centroid)
  write_hexagon_pdb(hexagon3d(centroid=stacked_centroid, z_theta=0.5*math.pi),
                    osp.join(work_dir, "stacked_90.pdb"),
                    centroid=stacked_centroid)
  write_hexagon_pdb(hexagon3d(x_theta=0.5*math.pi),
                    osp.join(work_dir, "unit_xrot90.pdb"))
  write_hexagon_pdb(hexagon3d(y_theta=0.5*math.pi),
                    osp.join(work_dir, "unit_yrot90.pdb"))
  write_hexagon_pdb(hexagon3d(z_theta=0.5*math.pi),
                    osp.join(work_dir, "unit_zrot90.pdb"))
  write_hexagon_pdb(hexagon3d(x_theta=-0.5*math.pi),
                    osp.join(work_dir, "unit_xrot-90.pdb"))
  write_hexagon_pdb(hexagon3d(y_theta=-0.5*math.pi),
                    osp.join(work_dir, "unit_yrot-90.pdb"))
  write_hexagon_pdb(hexagon3d(z_theta=-0.5*math.pi),
                    osp.join(work_dir, "unit_zrot-90.pdb"))

  # give a parallel example at the maximum centroid distance
  pll_max = hexagon3d(centroid=[0.0, 0.0, masticinxconfig.PISTACK_CENTROID_DIST_MAX])
  write_hexagon_pdb(pll_max, osp.join(work_dir, "pll_max.pdb"))

  # give a parallel example at maximum angular deviation
  pll_ang = hexagon3d(centroid=[0.0, 0.0, masticinxconfig.PISTACK_CENTROID_DIST_MAX],
                      x_theta=np.radians(masticinxconfig.PISTACK_ANGLE_DEVIATION))
  write_hexagon_pdb(pll_ang, osp.join(work_dir, "pll_ang.pdb"))
  # give a parallel example for different yaw categories
  # give an optimal parallel displaced example
  pll_x_disp = hexagon3d(centroid=[1.0, 0.0, masticinxconfig.PISTACK_CENTROID_DIST_MAX])
  write_hexagon_pdb(pll_x_disp, osp.join(work_dir, "pll_x_disp.pdb"))
  pll_y_disp = hexagon3d(centroid=[0.0, 1.0, masticinxconfig.PISTACK_CENTROID_DIST_MAX])
  write_hexagon_pdb(pll_y_disp, osp.join(work_dir, "pll_y_disp.pdb"))
  pll_xy_disp = hexagon3d(centroid=[1.0, 1.0, masticinxconfig.PISTACK_CENTROID_DIST_MAX])
  write_hexagon_pdb(pll_xy_disp, osp.join(work_dir, "pll_xy_disp.pdb"))

  # give a perpendicular example with centroid at maximum distance
  perp_max = hexagon3d(centroid=[0.0, 0.0, masticinxconfig.PISTACK_CENTROID_DIST_MAX],
                       y_theta=math.pi*0.5)
  write_hexagon_pdb(perp_max, osp.join(work_dir, "perp_max.pdb"))

  # give a perpendicular example with closest bisecting atom near just
  # under the maximum distance
  perp_close_max = hexagon3d(centroid=[0.0, 0.0,
                                       masticinxconfig.PISTACK_CENTROID_DIST_MAX -
                                       benzene_bond_length],
                             y_theta=math.pi*0.5)
  write_hexagon_pdb(perp_close_max, osp.join(work_dir, "perp_close_max.pdb"))

  # give a perpendicular example at maximum angular deviation
  perp_close_max_dev = hexagon3d(centroid=[0.0, 0.0,
                                           masticinxconfig.PISTACK_CENTROID_DIST_MAX
                                           - benzene_bond_length],
                                 y_theta=math.pi*0.5 +
                                 np.radians(masticinxconfig.PISTACK_ANGLE_DEVIATION))

  write_hexagon_pdb(perp_close_max_dev, osp.join(work_dir, "perp_close_max_dev.pdb"))

  # give a perpendicular example for different twist categories
  perp_close_max_twist = hexagon3d(centroid=[0.0, 0.0,
                                             masticinxconfig.PISTACK_CENTROID_DIST_MAX -
                                             benzene_bond_length],
                                   y_theta=math.pi*0.5,
                                   z_theta=math.pi*0.5)
  write_hexagon_pdb(perp_close_max_twist, osp.join(work_dir, "perp_close_max_twist.pdb"))


  # example of close but not projected onto the other ring, parallel
  pll_displaced = hexagon3d(centroid=[benzene_bond_length,
                                       0.0, 5.0])
  write_hexagon_pdb(pll_displaced, osp.join(work_dir, "pll_displaced.pdb"))

  pll_off_center = hexagon3d(centroid=[benzene_bond_length + masticinxconfig.PISTACK_OFFSET_MAX,
                                       0.0, 5.0])
  write_hexagon_pdb(pll_off_center, osp.join(work_dir, "pll_off_center.pdb"))

#+END_SRC

* test the structures

** Create the SystemType for 2 benzenes

Load the reference structure and do feature identification
#+BEGIN_SRC python :tangle make_benzenebenzene_systemtype_pkl.py
  import os.path as osp

  work_dir = "/home/salotz/Dropbox/devel/mastic/work/pi_stacking"

  ref_benzene_PDB_path = osp.join(work_dir, "ref_benzene.pdb")
  ref_benzene_MOL_path = osp.join(work_dir, "benzene.mol")

  from rdkit import Chem

  ref_benzene_PDB_rdkit = Chem.MolFromPDBFile(ref_benzene_PDB_path, removeHs=False, sanitize=False)
  ref_benzene_MOL_rdkit = Chem.MolFromMolFile(ref_benzene_MOL_path, sanitize=True)

  from mastic.interfaces.rdkit import AssignBondOrdersFromTemplate

  ref_benzene_rdkit = AssignBondOrdersFromTemplate(ref_benzene_MOL_rdkit, ref_benzene_PDB_rdkit)

  from mastic.interfaces.rdkit import RDKitMoleculeWrapper

  benzene_rdkit_wrapper = RDKitMoleculeWrapper(ref_benzene_rdkit, mol_name="benzene")

  ref_benzene_coords = benzene_rdkit_wrapper.get_conformer_coords(0)

  Benzene_Molecule = benzene_rdkit_wrapper.make_molecule_type(find_features=True)

#+END_SRC


Make a SystemType with a duplicate of the benzene
#+BEGIN_SRC python :tangle make_benzenebenzene_systemtype_pkl.py
  import os.path as osp

  import mastic.system as masticsys

  member_types = [Benzene_Molecule, Benzene_Molecule]
  system_attrs = {'molecule_source' : 'rdkit'}
  Benzene_Benzene_System = masticsys.SystemType("Benzene_Benzene_System",
                                                  member_types=member_types,
                                                  ,,**system_attrs)

  # when we make associations for assymmetric interactions we need to
  # define an association of A -> B and B -> A so we define the receptor
  # -> ligand interactions and ligand -> receptor interactions, this
  # really only means the donors -> acceptors from the members.


  selection_map_AB = [(0, None), (1, None)]
  selection_types = [None, None]
  assoc1_attrs = {'info' : 'benzene1-benzene2'}
  Benzene1_Benzene2_Association = \
              masticsys.AssociationType("Benzene1_Benzene2_Association",
                                      system_type=Benzene_Benzene_System,
                                      selection_map=selection_map_AB,
                                      selection_types=selection_types,
                                      ,,**assoc1_attrs)
  Benzene_Benzene_System.add_association_type(Benzene1_Benzene2_Association)

  selection_map_BA = selection_map_AB[::-1]
  assoc2_attrs = {'info' : 'benzene2-benzene1'}
  Benzene2_Benzene1_Association = \
              masticsys.AssociationType("Benzene2_Benzene1_Association",
                                      system_type=Benzene_Benzene_System,
                                      selection_map=selection_map_BA,
                                      selection_types=selection_types,
                                      ,,**assoc2_attrs)
  Benzene_Benzene_System.add_association_type(Benzene2_Benzene1_Association)


#+END_SRC


Now we want to save this as a pickle

#+BEGIN_SRC python :tangle make_benzenebenzene_systemtype_pkl.py
  import pickle

  system_pkl_path = osp.join(".", "Benzene_Benzene_SystemType.pkl")
  with open(system_pkl_path, 'wb') as wf:
      pickle.dump(Benzene_Benzene_System, wf)

#+END_SRC

** Make test cases for different geometries

Make the test case coordinates

#+BEGIN_SRC python :tangle generate_test_case_benzenes.py
  import os.path as osp
  import numpy as np
  import math

  import mastic.config.interactions as masticinxconfig

  from mastic.tests.hexagons import benzene3d, write_benzene_pdb, \
      pdb_row, end_row, benzene_bond_length

  test_benzenes = {}

  # test directly stacked benzenes
  stacked_centroid = [0.0, 0.0, 3.0]
  max_stacked_centroid = [0.0, 0.0, masticinxconfig.PISTACKING_CENTROID_DIST_MAX]
  test_benzenes['stacked'] = benzene3d(centroid=stacked_centroid)
  # with a 90 degree turn
  test_benzenes['stacked_90'] = benzene3d(centroid=stacked_centroid, z_theta=0.5*math.pi)

  # give a parallel example at the maximum centroid distance
  test_benzenes['pll_max'] = benzene3d(centroid=max_stacked_centroid)

  # give a parallel example at maximum angular deviation
  test_benzenes['pll_ang'] = benzene3d(centroid=max_stacked_centroid,
                      x_theta=np.radians(masticinxconfig.PISTACKING_ANGLE_DEVIATION))


  # give an optimal parallel displaced example
  test_benzenes['pll_x_disp'] = benzene3d(centroid=[1.0, 0.0, masticinxconfig.PISTACKING_CENTROID_DIST_MAX])
  test_benzenes['pll_y_disp'] = benzene3d(centroid=[0.0, 1.0, masticinxconfig.PISTACKING_CENTROID_DIST_MAX])
  test_benzenes['pll_xy_disp'] = benzene3d(centroid=[1.0, 1.0, masticinxconfig.PISTACKING_CENTROID_DIST_MAX])

  # give a perpendicular example with centroid at maximum distance
  test_benzenes['perp_max'] = benzene3d(centroid=[0.0, 0.0, masticinxconfig.PISTACKING_CENTROID_DIST_MAX],
                       y_theta=math.pi*0.5)

  # give a perpendicular example with closest bisecting atom near just
  # under the maximum distance
  test_benzenes['perp_close_max'] = benzene3d(centroid=[0.0, 0.0,
                                       masticinxconfig.PISTACKING_CENTROID_DIST_MAX -
                                       benzene_bond_length],
                             y_theta=math.pi*0.5)

  # give a perpendicular example at maximum angular deviation
  test_benzenes['perp_close_max_dev'] = benzene3d(centroid=[0.0, 0.0,
                                           masticinxconfig.PISTACKING_CENTROID_DIST_MAX
                                           - benzene_bond_length],
                                 y_theta=math.pi*0.5 +
                                 np.radians(masticinxconfig.PISTACKING_ANGLE_DEVIATION))

  # give a perpendicular example for different twist categories
  test_benzenes['perp_close_max_twist'] = benzene3d(centroid=[0.0, 0.0,
                                             masticinxconfig.PISTACKING_CENTROID_DIST_MAX -
                                             benzene_bond_length],
                                                    y_theta=math.pi*0.5,
                                                    z_theta=math.pi*0.5)

  # example of close but not projected onto the other benzene, parallel
  test_benzenes['pll_displaced'] = benzene3d(centroid=[benzene_bond_length,
                                                       0.0, 5.0])

  test_benzenes['pll_off_center'] = benzene3d(centroid=[benzene_bond_length +
                                                        masticinxconfig.PISTACKING_OFFSET_MAX,
                                                        0.0, 5.0])

#+END_SRC

Write these to PDBs for visualization
#+BEGIN_SRC python :tangle generate_test_case_benzenes.py
  for test_name, test_benzene in test_benzenes.items():
      file_name = "{}.pdb".format(test_name)
      write_benzene_pdb(test_benzene, osp.join(work_dir, file_name))
#+END_SRC



** Profile the different geometries for interactions

First substantiate the systems.

#+BEGIN_SRC python :tangle profile_test_cases.py
  import os.path as osp
  import pickle

  import mastic.interactions.pi_stacking as pinx
  import mastic.interactions.hydrogen_bond as hinx

  work_dir = "/home/salotz/Dropbox/devel/mastic/work/pi_stacking"

  # load the SystemType
  benzene_system_pkl_path = osp.join(work_dir, "Benzene_Benzene_SystemType.pkl")
  with open(benzene_system_pkl_path, 'rb') as rf:
      Benzene_Benzene_SystemType = pickle.load(rf)

  # load the coordinates for the reference benzene
  ref_benzene_PDB_path = osp.join(work_dir, "ref_benzene.pdb")

  from rdkit import Chem

  ref_benzene_rdkit = Chem.MolFromPDBFile(ref_benzene_PDB_path, removeHs=False, sanitize=False)

  from mastic.interfaces.rdkit import RDKitMoleculeWrapper

  benzene_rdkit_wrapper = RDKitMoleculeWrapper(ref_benzene_rdkit, mol_name="benzene")

  ref_benzene_coords = benzene_rdkit_wrapper.get_conformer_coords(0)

  from mastic.interactions.pi_stacking import PiStackingType

  # get the interaction space for pi-stacking
  pistack_inx_classes = Benzene_Benzene_SystemType.interaction_space([(0,1)], PiStackingType)[(0,1)]

  # profile the stacked one that should qualify
  stacked_member_coords = [ref_benzene_coords, test_benzenes['stacked']]
  stacked_system = Benzene_Benzene_SystemType.to_system(stacked_member_coords)

  # profile the interactions between the two rings
  stacked_inxs = stacked_system.associations[0].\
                 profile_interactions([PiStackingType],
                              interaction_classes=pistack_inx_classes)\
                              [PiStackingType]

  # substantiate the systems and profile each one
  test_inxs = {}
  test_failed_hits = {}
  for test_name, test_benzene in test_benzenes.items():
      member_coords = [ref_benzene_coords, test_benzene]
      system = Benzene_Benzene_SystemType.to_system(member_coords)

      # profile the interactions between the two rings
      failed_hits, all_inxs = system.associations[0].\
             profile_interactions([PiStackingType],
                                  interaction_classes=pistack_inx_classes,
                                  return_failed_hits=True)
      inxs = all_inxs[PiStackingType]
      test_failed_hits[test_name] = failed_hits
      test_inxs[test_name] = inxs
#+END_SRC


** Debug geometries between rings


#+BEGIN_SRC python :tangle debug_rings.py
  import mastic.interactions.pi_stacking as pinx

  ref = ref_benzene_coords[0:6]

  test_coords = {name : benzene[0:6] for name, benzene in test_benzenes.items()}
#+END_SRC
