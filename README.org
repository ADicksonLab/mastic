

* TODOs 

** TODO Assertion type checking

Might want to replace most of my type checks with assert statements or
something similar to 

#+BEGIN_SRC python
  if __debug__:
      if not isinstance(other, Molecule):
          raise TypeError("Other must be type Molecule, not {}".format(type(other)))
#+END_SRC

Both will be removed when the number of checks in the code when using the
optimize option like ~python -O code.py~.

This allows us to make it faster when we know the code runs and
doesn't need the checks.

Also using asserts could clean up the code a lot. Keeping the full
__debug__ business would allow for using my own exception types if I
really wanted it.


* Old Class Hierarchy

** TrackedMember
def __init__(self, idx=None, ids=None)

Attributes:
- idx :: the index of the tracked member
- ids :: a dictionary of types the TrackedMember belongs to

*** CoordinateArray

Attributes:
- array :: a numpy array where each row is an element (e.g. Atom) and
     the columns are each dimension.

*** Atom
*** PseudoAtom


*** TrackedList
def __init__(self, members=None, idx=None, ids=None)

Attributes:
- member_type :: the type of things contained in the TrackedList
- members :: a list of the members in the TrackedList
- changed :: has the TrackedList been changed
- indexed :: has the TrackedList been indexed since last change

Methods:
- copy
- index
- index_members
- member_idx
- check_members

- pop
- remove
- append
- extend
- insert
- clear
- reverse
- sort


**** AtomList

**** SelectionList
def __init__(self, members=None, idx=None, ids=None)
***** Molecule
  def __init__(self, atoms=None, bonds=None, angles=None, idx=None, ids=None)
***** MoleculeList

****** System
def __init__(self, members=None)
***** AngleList
***** BondList
****** MoleculeTopology

**** Association
def __init__(self, members=None, idx=None, ids=None) 
****** SystemAssociation
def __init__(self, members=None, association=None, system=None, idx=None, ids=None)
******* Interaction
def __init__(self, members=None, interaction_type=None)

******** HydrogenBondInx
def __init__(self, donor=None, acceptor=None, distance=None, angle=None)

******** PiCationInx
******** HydrophobicInx
******** SaltBridgeInx
******** PiStackingInx
******** HalogenBondInx


*** Selection
def __init__(self, container=None, sel=None, idx=None, ids=None)

Attributes:
- container :: The TrackedList subclass that you are selecting from
- container_type :: The type of the TrackedList subclass container
- sel_idx :: The indices of the selection from container, can be an int,
     slice, or list of ints.
- sel :: a collection of the type of the container with the members
     pointed to by the sel_idx.
- member_idx :: the indices of the members in the container

Methods:


**** Bond
def __init__(self, atoms, atom1_idx, atom2_idx, idx=None, ids=None)
**** Angle
Implementation not ready




** AssociationType

*** InteractionType
**** HydrogenBondType
**** PiCationType
**** HydrophobicType
**** SaltBridgeType
**** PiStackingType
**** HalogenBondType

** MoleculeType

Attributes:
- atoms :: a list of the Atoms in MoleculeType
- bonds :: a list of the bonds in a MoleculeType
- _RDMol :: a pointer to a rdkit.Mol object
- features :: a dict of lists of individual features in the molecule,
     with feature_type as the keys
- feature_families :: a list of the feature families in the features
     list
- feature_types :: a list of the feature types in the features list


* New Class Hierarchy


** DONE SelectionMember(member)
 - Module :: selection

 Attributes:
 - member :: the object that this member is wrapping, repr returns
      member.__repr__()
 - registry :: a dict of the selections that are pointing to this
      member, via the selections id in the global
      selection_registry. {sel_id : id_in_sel}.

 Methods:
 - get_selections :: returns a list of the selections this
      SelectionMember has been registered in.

*** DONE GenericSelection(container) : collections.abc.UserDict, typing.Mapping[SelectionIDs, Selected]
 - Module :: selection

 Attributes:
 - container :: the container for which selections will be made from
 - sel_ids :: the keys/indices that are used to select values from
      container

**** DONE IndexedSelection(container: typing.Sequence, sel: typing.Sequence[int]) : GenericSelection[int, Selected]
 - Module :: selection

 Attributes:
 - sel_reg_id :: this Selections id in the global SELECTION_REGISTRY

***** TODO GenericBond

****** TODO CovalentBond

***** TODO GenericAngle

****** TODO Angle

****** TODO DihedralAngle


**** DONE CoordArraySelection(array: np.ndarray, sel: typing.Sequence[int]) : GenericSelection[int, np.ndarray]
 - Module :: selection

 Selection provides views into the container with the sel_ids.

***** DONE Point(coords, coord_array=None)
 - Module :: selection

 A CoordArraySelection that points to a single 'row' in a CoordArray.

 The coordinates passed into Point are added to the CoordArray but not
 kept directly in the object.


****** TODO Atom
 Like a Point except always use coordinates in an AtomArray.

****** TODO PseudoAtom
 Like an Atom but with different attributes.


*** DONE SelectionContainer : typing.Container
 - Module :: selection

**** DONE SelectionDict
 - Module :: selection

***** DONE Molecule


**** DONE SelectionList
 - Module :: selection

***** DONE Association
***** TODO System


*** DONE CoordArray(array: np.ndarray)
 - Module :: selection

  Attributes:
  - coords :: convenient memorable accessor to the member
  - shape :: simply accesses the coords array shape attribute
  Methods:
  - add_coord :: given a an np.ndarray of the same size adds it to the
       array and returns the new coordinate's index.


**** TODO AtomArray

** TODO AssociationType
 - Module :: selection
