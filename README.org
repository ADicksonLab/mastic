

* TODOs 

** TODO Assertion type checking

Might want to replace most of my type checks with assert statements or
something similar to 

#+BEGIN_SRC python
  if __debug__:
      if not isinstance(other, Molecule):
          raise TypeError("Other must be type Molecule, not {}".format(type(other)))
#+END_SRC

Both will be removed when the number of checks in the code when using the
optimize option like ~python -O code.py~.

This allows us to make it faster when we know the code runs and
doesn't need the checks.

Also using asserts could clean up the code a lot. Keeping the full
__debug__ business would allow for using my own exception types if I
really wanted it.


* Class Hierarchy

** TrackedMember
def __init__(self, idx=None, ids=None)

*** Atom
**** PseudoAtom


*** TrackedList
def __init__(self, members=None, idx=None, ids=None)
**** AtomList

**** SelectionList
def __init__(self, members=None, idx=None, ids=None)
***** Molecule
  def __init__(self, atoms=None, bonds=None, angles=None, idx=None, ids=None)
***** MoleculeList

****** System
def __init__(self, members=None)
***** AngleList
***** BondList
****** MoleculeTopology

**** Association
def __init__(self, members=None, idx=None, ids=None) 
****** SystemAssociation
def __init__(self, members=None, association=None, system=None, idx=None, ids=None)
******* Interaction
def __init__(self, members=None, interaction_type=None)

******** HydrogenBondInx
def __init__(self, donor=None, acceptor=None, distance=None, angle=None)

******** PiCationInx
******** HydrophobicInx
******** SaltBridgeInx
******** PiStackingInx
******** HalogenBondInx


*** Selection
def __init__(self, container=None, sel=None, idx=None, ids=None)
**** Bond
def __init__(self, atoms, atom1_idx, atom2_idx, idx=None, ids=None)
**** Angle
Implementation not ready



** AssociationType

*** InteractionType
**** HydrogenBondType
**** PiCationType
**** HydrophobicType
**** SaltBridgeType
**** PiStackingType
**** HalogenBondType
